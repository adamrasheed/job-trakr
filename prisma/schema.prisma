// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Job {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  name         String
  status       JobStatus  @default(VIEWED)
  url          String?
  dateModified DateTime  @updatedAt
  board        Board     @relation(fields: [boardId], references: [id])
  boardId      String
}

model Board {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  jobs      Job[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum JobStatus {
  VIEWED
  APPLIED
  INTERVIEW_RECRUITER_SCREEN_SCHEDULED
  INTERVIEW_RECRUITER_SCREEN
  INTERVIEW_TECHNICAL_ROUND_SCHEDULED
  INTERVIEW_TECHNICAL_ROUND
  INTERVIEW_ONSITE_SCHEDULED
  INTERVIEW_ONSITE
  DECLINED
  OFFER_PROVIDED
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  email     String?
  avatar    String?
  role      Role     @default(USER)
  Boards    Board[]
  accounts      Account[]
  sessions      Session[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}